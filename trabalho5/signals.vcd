$date
	Sun Sep 29 13:35:20 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_CPU $end
$var wire 16 ! pc [15:0] $end
$var wire 16 " outM [15:0] $end
$var wire 1 # loadM $end
$var wire 16 $ addressM [15:0] $end
$var reg 1 % clk $end
$var reg 16 & inM [15:0] $end
$var reg 16 ' instruction [15:0] $end
$var reg 1 ( reset $end
$scope module uut $end
$var wire 16 ) addressM [15:0] $end
$var wire 1 % clk $end
$var wire 16 * inM [15:0] $end
$var wire 16 + instruction [15:0] $end
$var wire 1 , jmp $end
$var wire 1 - loadA $end
$var wire 1 . loadD $end
$var wire 1 / loadI $end
$var wire 1 # loadM $end
$var wire 16 0 outM [15:0] $end
$var wire 1 ( reset $end
$var wire 16 1 outALU [15:0] $end
$var wire 1 2 lt $end
$var wire 1 3 eq $end
$var wire 16 4 am [15:0] $end
$var reg 16 5 pc [15:0] $end
$var reg 16 6 regA [15:0] $end
$var reg 16 7 regD [15:0] $end
$scope module alu_0 $end
$var wire 1 8 f $end
$var wire 1 9 no $end
$var wire 1 : nx $end
$var wire 1 ; ny $end
$var wire 16 < x [15:0] $end
$var wire 16 = y [15:0] $end
$var wire 1 > zx $end
$var wire 1 ? zy $end
$var wire 1 3 zr $end
$var wire 6 @ sel [5:0] $end
$var wire 1 2 ng $end
$var reg 16 A out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx A
b0 @
0?
0>
bx =
bx <
0;
0:
09
08
bx 7
bx 6
bx 5
bx 4
x3
x2
bx 1
bx 0
1/
0.
0-
0,
b0 +
b0 *
bx )
1(
b0 '
b0 &
0%
bx $
0#
bx "
bx !
$end
#1
13
02
b0 4
b0 =
b0 "
b0 0
b0 1
b0 A
b0 !
b0 5
b0 $
b0 )
b0 6
b0 7
b0 <
1%
#2
0%
b11000000111001 '
b11000000111001 +
0(
#3
b11000000111001 $
b11000000111001 )
b11000000111001 6
b1 !
b1 5
1%
#4
03
b11000000111001 "
b11000000111001 0
b11000000111001 1
b11000000111001 A
b11000000111001 4
b11000000111001 =
0/
1.
1>
b110000 @
1:
0%
b1110110000010000 '
b1110110000010000 +
#5
b10 !
b10 5
b11000000111001 7
b11000000111001 <
1%
#6
b0 4
b0 =
1/
0.
0:
1?
1;
b101110 @
18
0%
b101101110100000 '
b101101110100000 +
#7
b101101110100000 $
b101101110100000 )
b101101110100000 6
b11 !
b11 5
1%
#8
02
b101101110100000 4
b101101110100000 =
b10101101100111 "
b10101101100111 0
b10101101100111 1
b10101101100111 A
0/
1.
0>
0?
b111 @
19
0%
b1110000111010000 '
b1110000111010000 +
#9
b11000000111001 "
b11000000111001 0
b11000000111001 1
b11000000111001 A
b100 !
b100 5
b10101101100111 7
b10101101100111 <
1%
#10
12
b1101010010011001 "
b1101010010011001 0
b1101010010011001 1
b1101010010011001 A
1/
0.
b1111 @
1?
0%
b1111101000 '
b1111101000 +
#11
b1111101000 4
b1111101000 =
b1111101000 $
b1111101000 )
b1111101000 6
b101 !
b101 5
1%
#12
02
b10101101100111 "
b10101101100111 0
b10101101100111 1
b10101101100111 A
0/
1#
08
b1100 @
09
0%
b1110001100001000 '
b1110001100001000 +
#13
b110 !
b110 5
1%
#14
12
b1101010010011001 "
b1101010010011001 0
b1101010010011001 1
b1101010010011001 A
1/
0#
18
b1111 @
19
0%
b1111101001 '
b1111101001 +
#15
b1111101001 4
b1111101001 =
b1111101001 $
b1111101001 )
b1111101001 6
b111 !
b111 5
1%
#16
0/
1.
1#
b1110 @
09
0%
b1110001110011000 '
b1110001110011000 +
#17
b1000 !
b1000 5
b1101010010011001 7
b1101010010011001 <
1%
#18
02
b10101101100111 "
b10101101100111 0
b10101101100111 1
b10101101100111 A
1/
0.
0#
b1111 @
19
0%
b1111101000 '
b1111101000 +
#19
b1111101000 4
b1111101000 =
b1111101000 $
b1111101000 )
b1111101000 6
b1001 !
b1001 5
1%
#20
12
b11111 4
b11111 =
b1101010001111010 "
b1101010001111010 0
b1101010001111010 1
b1101010001111010 A
0/
1.
1:
0?
b10011 @
0;
0%
b11111 &
b11111 *
b1111010011010000 '
b1111010011010000 +
#21
b1101010001011011 "
b1101010001011011 0
b1101010001011011 1
b1101010001011011 A
b1010 !
b1010 5
b1101010001111010 7
b1101010001111010 <
1%
#22
0%
